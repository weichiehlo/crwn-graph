{"version":3,"sources":["components/form-input/form-input.styles.jsx","components/form-input/form-input.component.jsx","components/custom-button/custom-button.styles.jsx","components/custom-button/custom-button.component.jsx","utils/graph.utils.js","redux/graph/graph.actions.js","utils/inputs.utils.js","../../node_modules/d3-scale-chromatic/src/categorical/Paired.js","components/versus-chart/versus-chart.styles.jsx","components/versus-chart/versus-chart.component.jsx","pages/versuschartpage/versuschartpage.styles.jsx","pages/versuschartpage/versuschartpage.component.jsx"],"names":["shrinkLabelStyles","css","GroupContainer","styled","div","FormSelectContainer","Select","FormInputContainer","input","FormInputLabel","label","FormSelectLabel","FormInput","handleChange","props","onChange","className","value","length","FormSelect","buttonStyles","invertedButtonStyles","googleSignInStyles","CustomButtonContainer","button","isGoogleSignIn","inverted","CustomButton","children","calculatePoint","i","intervalSize","colorRangeInfo","colorStart","colorEnd","useEndAsStart","getChartColor","data","colorArray","dataLength","colorScale","colorPoint","push","interpolateColors","d3","colorMapping","id","name","color","convertGraphDataForComposed","percision","currentRange","maxRange","interval","graphingData","totalReading","digit","serialNumber","sensorTotalCount","average","table","map","el","sort","a","b","temp","dif","reading","parseFloat","toFixed","reduce","point","processeData","convertGraphDataForPie","sensorList","Object","keys","filter","pieGraphingData","sensor","convertGraphDataForVersus","processedData","xReading","X_reading","yReading","Y_reading","xCurrentRange","xMaxRange","yCurrentRange","yMaxRange","xInterval","yInterval","xDigit","yDigit","xRange","yRange","tempArray","j","tempCount","entry","total","val","compareUnit","sensors","units","slice","lastIndexOf","setUserGraph","graph","type","GraphActionTypes","SET_USER_GRAPH","payload","formatDate","d","month","getMonth","day","getDate","year","getFullYear","join","colors","VersusChartContainer","Title","h1","XChartContainer","YChartContainer","VersusChartComponent","sensorNames","COLORS","index","key","split","width","height","margin","top","right","left","bottom","layout","strokeDasharray","hide","padding","dataKey","stackId","fill","unit","FormContainer","form","VersusChartPageContainer","Warning","Description","p","mapStateToProps","createStructuredSelector","pg","selectPg","isFetching","selectIsPgFetching","userGraph","selectUserGraph","sql","selectPgSql","connect","dispatch","fetchPgStart","info","initialState","model","xTable","yTable","testType","lowerSN","upperSN","range","startDate","endDate","useState","graphInfo","setgraphInfo","useEffect","title","query","database","versus","graphData","getCurrentUser","user","loadGraphFromFireStore","firebaseGraphs","Array","isArray","element","composed","pie","helper","loadSensorUnits","datname","Date","prototype","addDays","days","date","this","valueOf","setDate","handleSubmit","event","preventDefault","tableName","testTypeString","all","target","handleGraph","raw","convertedData","convertedDataWithUnit","selected","xUnit","find","yUnit","console","log","onSubmit","placeholder","options","required","isMulti","item","selection","showSelectionPreview","moveRangeOnFirstSelection","months","ranges","direction","Fragment"],"mappings":"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","file":"static/js/7.a5575f87.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\r\nimport Select from 'react-select'\r\n\r\nconst subColor = 'grey';\r\nconst mainColor = 'black';\r\n\r\nconst shrinkLabelStyles = css`\r\n  top: -14px;\r\n  font-size: 12px;\r\n  color: ${mainColor};\r\n`;\r\n\r\nexport const GroupContainer = styled.div`\r\n  position: relative;\r\n  margin: 45px 0 0 0;\r\n\r\n  input[type='password'] {\r\n    letter-spacing: 0.3em;\r\n  }\r\n`;\r\n\r\nexport const FormSelectContainer = styled(Select)`\r\n  background: none;\r\n  background-color: white;\r\n  color: ${subColor};\r\n  font-size: 18px;\r\n  padding: 10px 10px 10px 5px;\r\n  display: block;\r\n  width: 100%;\r\n  border: none;\r\n  border-radius: 0;\r\n  min-width: 200px;\r\n`;\r\n\r\nexport const FormInputContainer = styled.input`\r\n  background: none;\r\n  background-color: white;\r\n  color: ${subColor};\r\n  font-size: 18px;\r\n  padding: 10px 10px 10px 5px;\r\n  display: block;\r\n  width: 100%;\r\n  border: none;\r\n  border-radius: 0;\r\n  border-bottom: 1px solid ${subColor};\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  &:focus ~ label {\r\n    ${shrinkLabelStyles}\r\n  }\r\n`;\r\n\r\nexport const FormInputLabel = styled.label`\r\n  color: ${subColor};\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  position: absolute;\r\n  pointer-events: none;\r\n  left: 5px;\r\n  top: 10px;\r\n  transition: 300ms ease all;\r\n\r\n  &.shrink {\r\n    ${shrinkLabelStyles}\r\n  }\r\n`;\r\n\r\nexport const FormSelectLabel = styled.label`\r\n  color: ${subColor};\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  pointer-events: none;\r\n  left: 5px;\r\n  top: 10px;\r\n  transition: 300ms ease all;\r\n\r\n`;\r\n\r\n","import React from 'react';\r\n\r\nimport {\r\n  GroupContainer,\r\n  FormInputContainer,\r\n  FormInputLabel,\r\n  FormSelectContainer,\r\n  FormSelectLabel\r\n} from './form-input.styles';\r\n\r\nexport const FormInput = ({ handleChange, label, ...props }) => (\r\n  <GroupContainer>\r\n    <FormInputContainer onChange={handleChange} {...props} />\r\n    {label ? (\r\n      <FormInputLabel className={props.value.length ? 'shrink' : ''}>\r\n        {label}\r\n      </FormInputLabel>\r\n    ) : null}\r\n  </GroupContainer>\r\n);\r\n\r\nexport const FormSelect = ({ handleChange, label, ...props }) => (\r\n  <GroupContainer>\r\n    {label ? (\r\n      <FormSelectLabel>\r\n        {label}\r\n      </FormSelectLabel>\r\n    ) : null}\r\n    <FormSelectContainer onChange={handleChange} {...props} />\r\n  </GroupContainer>\r\n);\r\n\r\n\r\n\r\n","import styled, { css } from 'styled-components';\r\n\r\nconst buttonStyles = css`\r\n  background-color: black;\r\n  color: white;\r\n  border: none;\r\n\r\n  &:hover {\r\n    background-color: white;\r\n    color: black;\r\n    border: 1px solid black;\r\n  }\r\n`;\r\n\r\nconst invertedButtonStyles = css`\r\n  background-color: white;\r\n  color: black;\r\n  border: 1px solid black;\r\n\r\n  &:hover {\r\n    background-color: black;\r\n    color: white;\r\n    border: none;\r\n  }\r\n`;\r\n\r\nconst googleSignInStyles = css`\r\n  background-color: #4285f4;\r\n  color: white;\r\n\r\n  &:hover {\r\n    background-color: #357ae8;\r\n    border: none;\r\n  }\r\n`;\r\n\r\nconst getButtonStyles = props => {\r\n  if (props.isGoogleSignIn) {\r\n    return googleSignInStyles;\r\n  }\r\n\r\n  return props.inverted ? invertedButtonStyles : buttonStyles;\r\n};\r\n\r\nexport const CustomButtonContainer = styled.button`\r\n  min-width: 165px;\r\n  width: auto;\r\n  height: 50px;\r\n  letter-spacing: 0.5px;\r\n  line-height: 50px;\r\n  padding: 0 35px 0 35px;\r\n  font-size: 15px;\r\n  text-transform: uppercase;\r\n  font-family: 'Open Sans Condensed';\r\n  font-weight: bolder;\r\n  cursor: pointer;\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  ${getButtonStyles}\r\n`;\r\n","import React from 'react';\r\n\r\nimport { CustomButtonContainer } from './custom-button.styles';\r\n\r\nconst CustomButton = ({ children, ...props }) => (\r\n  <CustomButtonContainer {...props}>{children}</CustomButtonContainer>\r\n);\r\n\r\nexport default CustomButton;\r\n","import * as d3 from 'd3-scale-chromatic'\r\nconst calculatePoint = (i, intervalSize, colorRangeInfo) =>{\r\n    let { colorStart, colorEnd, useEndAsStart } = colorRangeInfo;\r\n    return (useEndAsStart\r\n      ? (colorEnd - (i * intervalSize))\r\n      : (colorStart + (i * intervalSize)));\r\n  }\r\n\r\nconst interpolateColors = (dataLength, colorScale, colorRangeInfo)=>{\r\n    let { colorStart, colorEnd } = colorRangeInfo;\r\n    let colorRange = colorEnd - colorStart;\r\n    let intervalSize = colorRange / dataLength;\r\n    let i, colorPoint;\r\n    let colorArray = [];\r\n\r\n    for (i = 0; i < dataLength; i++) {\r\n        colorPoint = calculatePoint(i, intervalSize, colorRangeInfo);\r\n        colorArray.push(colorScale(colorPoint));\r\n    }\r\n\r\n    return colorArray;\r\n}  \r\n\r\nexport const getChartColor = (data)=>{\r\n    let colorArray = interpolateColors(data.length,d3.interpolateViridis,{\r\n        colorStart: 0,\r\n        colorEnd: 1,\r\n        useEndAsStart: false,\r\n    });\r\n    let colorMapping = [];\r\n    for(let i=0; i<colorArray.length;i++){\r\n        colorMapping.push({id:i,name:data[i],color:colorArray[i]})\r\n    }\r\n    return colorMapping\r\n}\r\n\r\nexport const convertGraphDataForComposed = (data,percision)=>{\r\n\r\n    let graphingData = [];\r\n    let currentRange, maxRange;\r\n    let totalReading = [];\r\n    let interval;\r\n    let digit = 0;\r\n    let serialNumber = {};\r\n    let sensorTotalCount = {};\r\n    let average = {};\r\n\r\n    for(let table in data){\r\n        totalReading = [...totalReading,...data[table].map(el=>el['reading'])];\r\n        sensorTotalCount[table] = 0\r\n    }\r\n\r\n\r\n    totalReading.sort((a,b)=>a-b)\r\n    \r\n    currentRange = totalReading[0];\r\n    maxRange = totalReading[totalReading.length-1];\r\n\r\n\r\n    //to decode the decimal place\r\n    let temp = 1;\r\n    let dif = maxRange-currentRange;\r\n    for(let i=0; i<5; i++){\r\n        if(temp > dif)\r\n        {\r\n            temp /= 10\r\n            digit++\r\n        }else{\r\n            break\r\n        }\r\n        \r\n    }\r\n    digit++\r\n    \r\n\r\n    interval = parseFloat(parseFloat((totalReading[totalReading.length-1]-totalReading[0])/percision).toFixed(digit));\r\n\r\n    for(let reading in data){\r\n        average[reading] = (data[reading].reduce((a,el)=>a+el.reading,0)/data[reading].length).toFixed(digit)\r\n    }\r\n  \r\n    \r\n\r\n    while(currentRange <= maxRange){\r\n        let temp = {};\r\n        temp['name'] = `${currentRange.toFixed(digit)}-${(currentRange+interval).toFixed(digit)}`\r\n        \r\n        for(let table in data){\r\n            serialNumber[table + \"-\" + temp['name']] = [];\r\n            temp[table] = 0;\r\n            for(let i=0; i<data[table].length;i++){\r\n                if(data[table][i]['reading']>=currentRange && data[table][i]['reading'] <= (currentRange+interval)){\r\n                    serialNumber[table + \"-\" + temp['name']].push(data[table][i]['serial_number']);\r\n                    temp[table]++;\r\n                    sensorTotalCount[table]++\r\n                }\r\n            }\r\n        }\r\n        graphingData.push(temp)\r\n        currentRange += interval\r\n    }\r\n\r\n\r\n    //convert the raw data into percentage\r\n    for(let point of graphingData){\r\n        for(let table in sensorTotalCount){\r\n            point[table] = ((point[table] / sensorTotalCount[table])*100).toFixed(2)\r\n        }\r\n    }\r\n\r\n\r\n    return {processeData:graphingData,serialNumber:serialNumber,average:average}\r\n\r\n}\r\n\r\nexport const convertGraphDataForPie = (data,percision)=>{\r\n\r\n    let graphingData = [];\r\n    let currentRange, maxRange;\r\n    let totalReading = [];\r\n    let interval;\r\n    let digit = 0;\r\n    let serialNumber = {};\r\n    let sensorTotalCount = {};\r\n    let average = {};\r\n\r\n    for(let table in data){\r\n        totalReading = [...totalReading,...data[table].map(el=>el['reading'])];\r\n        sensorTotalCount[table] = 0\r\n    }\r\n\r\n\r\n    totalReading.sort((a,b)=>a-b)\r\n    \r\n    currentRange = totalReading[0];\r\n    maxRange = totalReading[totalReading.length-1];\r\n\r\n\r\n    //to decode the decimal place\r\n    let temp = 1;\r\n    let dif = maxRange-currentRange;\r\n    for(let i=0; i<5; i++){\r\n        if(temp > dif)\r\n        {\r\n            temp /= 10\r\n            digit++\r\n        }else{\r\n            break\r\n        }\r\n        \r\n    }\r\n    digit++\r\n    \r\n\r\n    interval = parseFloat(parseFloat((totalReading[totalReading.length-1]-totalReading[0])/percision).toFixed(digit));\r\n\r\n    for(let reading in data){\r\n        average[reading] = (data[reading].reduce((a,el)=>a+el.reading,0)/data[reading].length).toFixed(digit)\r\n    }\r\n  \r\n    \r\n\r\n    while(currentRange <= maxRange){\r\n        let temp = {};\r\n        temp['name'] = `${currentRange.toFixed(digit)}-${(currentRange+interval).toFixed(digit)}`\r\n        \r\n        for(let table in data){\r\n            serialNumber[table + \"-\" + temp['name']] = [];\r\n            temp[table] = 0;\r\n            for(let i=0; i<data[table].length;i++){\r\n                if(data[table][i]['reading']>=currentRange && data[table][i]['reading'] <= (currentRange+interval)){\r\n                    serialNumber[table + \"-\" + temp['name']].push(data[table][i]['serial_number']);\r\n                    temp[table]++;\r\n                    sensorTotalCount[table]++\r\n                }\r\n            }\r\n        }\r\n        graphingData.push(temp)\r\n        currentRange += interval\r\n    }\r\n\r\n    //convert the data for pie\r\n    const sensorList = Object.keys(graphingData[0]).filter(el=>el !== 'name');\r\n    let pieGraphingData = {};\r\n    for(let sensor of sensorList){\r\n        pieGraphingData[sensor] = []\r\n    }\r\n    for(let interval of graphingData){\r\n        for(let sensor of sensorList){\r\n            pieGraphingData[sensor].push({name:interval['name'], value:interval[sensor]})\r\n        }\r\n    }\r\n\r\n    return {processeData:pieGraphingData,serialNumber:serialNumber,average:average}\r\n\r\n}\r\n\r\nexport const convertGraphDataForVersus = (data,percision)=>{\r\n\r\n   let processedData = {};\r\n\r\n   for(let table in data){\r\n    let xReading = data[table].map(el=>el.X_reading).sort((a,b)=>a-b)\r\n    let yReading = data[table].map(el=>el.Y_reading).sort((a,b)=>a-b)\r\n    let xCurrentRange = xReading[0]\r\n    let xMaxRange = xReading[xReading.length-1]\r\n    let yCurrentRange = yReading[0]\r\n    let yMaxRange = yReading[yReading.length-1]\r\n    let xInterval = (xMaxRange - xCurrentRange)/percision \r\n    let yInterval = (yMaxRange - yCurrentRange)/percision\r\n    let xDigit = 0, yDigit = 0\r\n    let xRange = [], yRange = [] \r\n\r\n    //to decode the decimal place\r\n    let temp = 1;\r\n    let dif = xMaxRange-xCurrentRange;\r\n    for(let i=0; i<5; i++){\r\n        if(temp > dif)\r\n        {\r\n            temp /= 10\r\n            xDigit++\r\n        }else{\r\n            break\r\n        }\r\n        \r\n    }\r\n    xDigit++\r\n\r\n    temp = 1;\r\n    dif = yMaxRange-yCurrentRange;\r\n    for(let i=0; i<5; i++){\r\n        if(temp > dif)\r\n        {\r\n            temp /= 10\r\n            yDigit++\r\n        }else{\r\n            break\r\n        }\r\n        \r\n    }\r\n    yDigit++\r\n\r\n    // console.log(xReading)\r\n    // console.log(xMaxRange)\r\n    // console.log(yReading)\r\n    // console.log(yMaxRange)\r\n\r\n    while(xCurrentRange <= xMaxRange){\r\n        xRange.push(xCurrentRange)\r\n        yRange.push(yCurrentRange)\r\n        xCurrentRange += xInterval\r\n        yCurrentRange += yInterval\r\n    }\r\n    \r\n    // console.log(xRange)\r\n    // console.log(yRange)\r\n\r\n    // processedData[table] = {};\r\n\r\n    // console.log(data[table].length)\r\n    \r\n    let tempArray = [];\r\n    for(let i=0; i<xRange.length-1;i++){\r\n        let temp = {}\r\n        temp['name'] = `${xRange[i].toFixed(xDigit)}-${xRange[i+1].toFixed(xDigit)}`\r\n        for(let j=0; j<yRange.length-1;j++){\r\n            let tempCount = 0;\r\n            for(let entry of data[table]){\r\n                if(entry['X_reading'] >= xRange[i] && entry['X_reading'] < xRange[i+1] && entry['Y_reading'] >= yRange[j] && entry['Y_reading'] < yRange[j+1]){\r\n                    tempCount++\r\n                }\r\n            }\r\n            temp[`${yRange[j].toFixed(yDigit)}-${yRange[j+1].toFixed(yDigit)}`] = tempCount\r\n        }\r\n        // console.log(temp)\r\n        tempArray.push(temp);\r\n        \r\n    }\r\n    processedData[table] = tempArray\r\n\r\n   }\r\n\r\n   //convert to percentage\r\n   for(let table in processedData){\r\n        for(let interval of processedData[table]){\r\n\r\n            let total = Object.keys(interval).filter(el=>el !== 'name').reduce((a,val)=>a+interval[val],0)\r\n            for(let el of Object.keys(interval).filter(el=>el !== 'name')){\r\n                interval[el] = ((interval[el]/total) * 100).toFixed(1)\r\n            }\r\n        }\r\n   }\r\n    \r\n    // console.log('--------')\r\n    // console.log(processedData)\r\n    // console.log('--------')\r\n   return processedData\r\n}\r\n\r\nexport const compareUnit = (sensors)=>{\r\n    \r\n    let units = sensors.map(el=>el.slice(el.lastIndexOf('(')))\r\n    for(let i=1; i<units.length; i++){\r\n        if(units[i-1] !== units[i]){\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n    \r\n}\r\n\r\n\r\n","import GraphActionTypes from './graph.types';\r\n\r\nexport const setUserGraph = graph => ({\r\n  type: GraphActionTypes.SET_USER_GRAPH,\r\n  payload: graph\r\n});\r\n","export const formatDate = (d) =>{\r\n    let month = '' + (d.getMonth() + 1),\r\n    day = '' + d.getDate(),\r\n    year = d.getFullYear();\r\n\r\nif (month.length < 2) \r\n    month = '0' + month;\r\nif (day.length < 2) \r\n    day = '0' + day;\r\n\r\nreturn [year, month, day].join('-');\r\n}\r\n\r\n","import colors from \"../colors.js\";\n\nexport default colors(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\");\n","import styled from 'styled-components';\r\n\r\nexport const VersusChartContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  padding: 10px 20px;\r\n  align-items:center;\r\n  border-radius: 25px;\r\n`;\r\n\r\n\r\nexport const Title = styled.h1`\r\n  color: black;\r\n  padding: 1px 15px;\r\n  border-bottom: 5px solid red;\r\n  width: 100%;\r\n  margin-bottom: 50px;\r\n`;\r\n\r\nexport const XChartContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items:center;\r\n`;\r\n\r\nexport const YChartContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items:center;\r\n`;\r\n\r\n","import React from 'react'\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\r\nimport { VersusChartContainer, Title, XChartContainer, YChartContainer} from './versus-chart.styles'\r\nimport * as d3 from 'd3-scale-chromatic'\r\n\r\n\r\n\r\nconst VersusChartComponent = function(props){\r\n\r\n    let {data} = props\r\n    const sensorNames = Object.keys(data);\r\n    const COLORS = d3.schemePaired;\r\n\r\n    return(\r\n        <VersusChartContainer>\r\n            {\r\n                sensorNames.map((entry,index)=>{\r\n                    return(\r\n                        <div key={index}>\r\n                            <Title>{entry} Chart</Title>\r\n                            <XChartContainer>\r\n                                <h2>{entry.split(\" vs \")[0] + `(${data[entry]['xUnit']})`}</h2>\r\n                                <YChartContainer>\r\n                                    <BarChart width={1100}\r\n                                    height={400}\r\n                                    data={data[entry]['data']}\r\n                                    margin={{top: 20, right: 30, left: 20, bottom: 5}}\r\n                                    layout=\"vertical\"\r\n                                    >\r\n                                    <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                                    <XAxis type=\"number\" hide />\r\n                                    <YAxis type=\"category\" width={150} padding={{ left: 20 }} dataKey=\"name\"/>\r\n                                    <Tooltip/>\r\n                                    <Legend />\r\n                                    {\r\n                                        Object.keys(data[entry]['data'][0]).filter((el)=>el !=='name').map((point,i)=>{\r\n                                            return <Bar key={i} dataKey= {point} stackId={index} fill={COLORS[i] } unit=\"%\" />\r\n                                        })\r\n                                    }\r\n                                    </BarChart>\r\n                                    <h2>{entry.split(\" vs \")[1] + `(${data[entry]['yUnit']})`}</h2>  \r\n                                </YChartContainer>\r\n                            </XChartContainer>                   \r\n                        </div>\r\n                    )\r\n                    \r\n                }\r\n                    )\r\n\r\n            }\r\n\r\n        </VersusChartContainer>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default VersusChartComponent","import styled from 'styled-components';\r\n\r\nexport const FormContainer = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  padding: 10px 20px;\r\n  align-items:center;\r\n  border-radius: 25px;\r\n  gap: 12px;\r\n`;\r\n\r\nexport const VersusChartPageContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Warning = styled.div`\r\n  color: red;\r\n`;\r\nexport const Title = styled.h1`\r\n  color:gray;\r\n  font-size:50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items:center;\r\n`;\r\n\r\nexport const Description = styled.p`\r\n  color:gray;\r\n  font-size:35px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  padding: 10px 20px;\r\n  align-items:center;\r\n  border-radius: 25px;\r\n  gap: 12px;\r\n`;","import React, {useState,useEffect} from 'react';\r\nimport VersusChartComponent from '../../components/versus-chart/versus-chart.component'\r\nimport { FormContainer, VersusChartPageContainer, Warning, Description, Title} from './versuschartpage.styles'\r\nimport { FormInput, FormSelect} from '../../components/form-input/form-input.component';\r\nimport CustomButton from '../../components/custom-button/custom-button.component';\r\nimport { fetchPgStart } from '../../redux/pg/pg.actions'\r\nimport { setUserGraph } from '../../redux/graph/graph.actions'\r\nimport { selectPg, selectIsPgFetching, selectPgSql } from '../../redux/pg/pg.selectors';\r\nimport { selectUserGraph } from '../../redux/graph/graph.selectors'\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport Spinner from '../../components/spinner/spinner.component';\r\n\r\nimport 'react-date-range/dist/styles.css'; // main style file\r\nimport 'react-date-range/dist/theme/default.css'; // theme css file\r\nimport { DateRangePicker  } from 'react-date-range';\r\nimport { formatDate } from '../../utils/inputs.utils'\r\nimport { convertGraphDataForVersus } from '../../utils/graph.utils'\r\nimport { getCurrentUser,loadGraphFromFireStore } from '../../firebase/firebase.utils'\r\n\r\n\r\n\r\n\r\n\r\nconst VersusChartPage = ({fetchPgStart,pg,isFetching,setUserGraph, userGraph}) => {\r\n\r\n    const initialState = {\r\n      model: '',\r\n      xTable: '',\r\n      yTable: '',\r\n      testType: [],\r\n      lowerSN: '',\r\n      upperSN: '',\r\n      range:[{\r\n        startDate: '',\r\n        endDate: '',\r\n        key: 'selection'\r\n      }]\r\n    }\r\n    \r\n    const [graphInfo, setgraphInfo] = useState(initialState);\r\n \r\n\r\n\r\n  useEffect(() => {\r\n    const helper = async()=>{\r\n       //fetch the name of the databases\r\n       await fetchPgStart({title:'databaseModel', query:`SELECT datname FROM pg_database WHERE datname != 'template1' AND datname != 'template0' AND datname != 'postgres'`, database: ''})\r\n      //load graph\r\n      if(!Object.keys(userGraph.versus.graphData).length)\r\n      {\r\n        const user = await getCurrentUser();\r\n        const firebaseGraphs = await loadGraphFromFireStore(user)\r\n\r\n        if(firebaseGraphs && !Array.isArray(firebaseGraphs)){\r\n          for(let element in firebaseGraphs.sql){\r\n            await fetchPgStart({title: firebaseGraphs.sql[element].title, query: firebaseGraphs.sql[element].query, database: firebaseGraphs.sql[element].database})\r\n          }\r\n          setUserGraph({\r\n            composed: userGraph.composed,\r\n            pie: userGraph.pie,\r\n            versus: firebaseGraphs.versus\r\n          })\r\n        }\r\n\r\n      }\r\n    \r\n      \r\n      }\r\n    helper();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n\r\n    const loadSensorUnits = async()=>{\r\n     \r\n          for(let model of pg['databaseModel'].map(el=>el.datname).filter(el=>el.length===6)){\r\n            await fetchPgStart({title:`${model}_databaseSensor`, query:`SELECT * FROM \"sensor_to_unit\"`, database: model})\r\n          }\r\n    }\r\n    if(pg['databaseModel']) loadSensorUnits();\r\n     \r\n  }, [pg['databaseModel']]);\r\n\r\n  useEffect(() => {\r\n    let info = {};\r\n    if(graphInfo['xTable']|| graphInfo['yTable'])\r\n    {\r\n      if(pg['databaseTestType']){\r\n        info = {...info, 'testType': pg['databaseTestType'].map((el)=>el['test_type'])}\r\n      }\r\n      if(pg['databaseMinSN']){\r\n        info = {...info, 'lowerSN': pg['databaseMinSN'][0]['min']}\r\n      }\r\n      if(pg['databaseMaxSN']){\r\n        info = {...info, 'upperSN': pg['databaseMaxSN'][0]['max']}\r\n      }\r\n      if(pg['databaseMinDate']){\r\n        let temp = graphInfo['range'];\r\n        temp[0]['startDate'] = new Date(pg['databaseMinDate'][0]['min']);\r\n        info = {...info, 'range': temp};\r\n      }\r\n      if(pg['databaseMaxDate']){\r\n        Date.prototype.addDays = function(days) {\r\n        var date = new Date(this.valueOf());\r\n        date.setDate(date.getDate() + days);\r\n        return date;\r\n    }\r\n      let temp = graphInfo['range'];\r\n      temp[0]['endDate'] = new Date(pg['databaseMaxDate'][0]['max']).addDays(1);\r\n      info = {...info, 'range':  temp};\r\n    }\r\n    }\r\n    \r\n    setgraphInfo({ ...graphInfo, ...info });\r\n     \r\n  }, [pg]);\r\n  \r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n   \r\n    \r\n    const {model,\r\n    xTable,\r\n    yTable,\r\n    testType,\r\n    lowerSN,\r\n    upperSN} = graphInfo\r\n    const startDate = formatDate(graphInfo['range'][0]['startDate']);\r\n    const endDate = formatDate(graphInfo['range'][0]['endDate']);\r\n    const tableName = model + \"-\" + xTable + \" vs \" +yTable\r\n    let testTypeString = \"\"\r\n    if(testType.length === 1){\r\n      testTypeString = `AND \"${xTable}\".test_type = '${testType[0]}'`\r\n    }else{\r\n      testTypeString = `AND (\"${xTable}\".test_type = '${testType[0]}'`\r\n      for(let i=1; i<testType.length; i++){\r\n        testTypeString += ` OR \"${xTable}\".test_type = '${testType[i]}'`\r\n      }\r\n      testTypeString += \")\"\r\n    }\r\n\r\n  \r\n    await fetchPgStart({title:tableName,\r\n    query:`SELECT \"${xTable}\".reading AS \"X_reading\",\"${yTable}\".reading AS \"Y_reading\"\r\n    FROM \"${xTable}\" INNER JOIN \"${yTable}\" ON \"${xTable}\".serial_number = \"${yTable}\".serial_number\r\n    AND \"${xTable}\".ref_line_number = \"${yTable}\".ref_line_number\r\n    AND \"${xTable}\".test_date = \"${yTable}\".test_date \r\n    WHERE \"${xTable}\".test_date >= '${startDate}' AND \"${xTable}\".test_date <= '${endDate}'\r\n    AND \"${xTable}\".serial_number >= '${lowerSN}' AND \"${xTable}\".serial_number <= '${upperSN}' \r\n      ${testTypeString}`,\r\n    database: model})\r\n    setUserGraph({\r\n      composed: userGraph.composed,\r\n      pie: userGraph.pie,\r\n      versus: {...userGraph.versus,all:[...userGraph.versus.all,tableName]}\r\n    })\r\n    \r\n  };\r\n\r\n\r\n  const handleChange = async(event) => {\r\n    const { name, value } = event.target? event.target:event;\r\n    setgraphInfo({ ...graphInfo, [name]: value });\r\n    switch(name){\r\n      case 'model':\r\n        if(graphInfo['xTable'] || graphInfo['yTable']) setgraphInfo({...initialState,'model':value});\r\n        await fetchPgStart({title:'databaseSensor', query:`SELECT * FROM \"sensor_to_unit\"`, database: value})\r\n        break;\r\n      case 'xTable':\r\n      case 'yTable':\r\n        await fetchPgStart({title:'databaseTestType', query:`SELECT DISTINCT (test_type) FROM \"${value}\"`, database: graphInfo['model']});\r\n        await fetchPgStart({title:'databaseMinSN', query:`SELECT MIN (serial_number) FROM \"${value}\"`, database: graphInfo['model']});\r\n        await fetchPgStart({title:'databaseMaxSN', query:`SELECT MAX (serial_number) FROM \"${value}\"`, database: graphInfo['model']});\r\n        await fetchPgStart({title:'databaseMinDate', query:`SELECT MIN (test_date) FROM \"${value}\"`, database: graphInfo['model']});\r\n        await fetchPgStart({title:'databaseMaxDate', query:`SELECT MAX (test_date) FROM \"${value}\"`, database: graphInfo['model']});\r\n        break;\r\n      default:\r\n    }\r\n\r\n  };\r\n\r\n  const handleGraph = async(event) =>{\r\n\r\n    event.preventDefault(userGraph.versus['percision'])\r\n\r\n    \r\n    let raw = {};\r\n    let xUnit, yUnit;\r\n    for(let table of userGraph.versus['selected']){\r\n      raw[table] = pg[table]\r\n    }\r\n\r\n    let convertedData = convertGraphDataForVersus(raw,userGraph.versus['percision']);\r\n    let convertedDataWithUnit = {}\r\n\r\n    for(let table of userGraph.versus.selected){\r\n      xUnit = pg[`${table.slice(0,6)}_databaseSensor`].find(el=>el['sensor_name'] === table.split(\" vs \")[0].slice(7))['unit']\r\n      yUnit = pg[`${table.slice(0,6)}_databaseSensor`].find(el=>el['sensor_name'] === table.split(\" vs \")[1])['unit']\r\n      convertedDataWithUnit[table] = {'data':convertedData[table],'xUnit':xUnit,'yUnit':yUnit}\r\n    }\r\n    setUserGraph({\r\n      composed: userGraph.composed,\r\n      pie: userGraph.pie,\r\n      versus: {...userGraph.versus,graphData:convertedDataWithUnit}\r\n    })\r\n\r\n    console.log(convertedDataWithUnit)\r\n    \r\n  }\r\n \r\n  \r\n  return (\r\n    <VersusChartPageContainer>\r\n    <Title>Versus CHART</Title>\r\n      <Description>\r\n        Versus chart shows the relationship between 2 sensors and how they are distributed.\r\n      </Description>\r\n      <FormContainer onSubmit={handleSubmit}>\r\n        {pg['databaseModel']?\r\n          <FormSelect\r\n          label='Model'\r\n          placeholder=\"\"\r\n          options={pg['databaseModel'].map((el)=>({value:el['datname'],label:el['datname']}))}\r\n          onChange={(el)=>handleChange({...el,name:'model'})}\r\n          required\r\n        />\r\n        :\r\n         <Spinner/>\r\n        }\r\n        {\r\n        graphInfo['model']?\r\n          <div>\r\n            {\r\n              pg[`${graphInfo['model']}_databaseSensor`]?\r\n                <div>\r\n                  <FormSelect\r\n                  label='X Sensor'\r\n                  placeholder=\"\"\r\n                  value={{value:graphInfo['xTable'],label:graphInfo['xTable']}}\r\n                  options={pg[`${graphInfo['model']}_databaseSensor`].map((el)=>({value:el['sensor_name'],label:el['sensor_name']}))}\r\n                  onChange={(el)=>handleChange({...el,name:'xTable'})}\r\n                  required\r\n                  />\r\n\r\n                  <FormSelect\r\n                  label='Y Sensor'\r\n                  placeholder=\"\"\r\n                  value={{value:graphInfo['yTable'],label:graphInfo['yTable']}}\r\n                  options={pg[`${graphInfo['model']}_databaseSensor`].map((el)=>({value:el['sensor_name'],label:el['sensor_name']}))}\r\n                  onChange={(el)=>handleChange({...el,name:'yTable'})}\r\n                  required\r\n                  />\r\n                </div>\r\n              :\r\n              <Spinner/>\r\n            }\r\n            \r\n            {\r\n              graphInfo['testType']&&graphInfo['lowerSN']&&graphInfo['upperSN']&&graphInfo['range'][0]['startDate'] && graphInfo['range'][0]['endDate']?\r\n                <div>\r\n                  <FormSelect\r\n                  label='Test Type'\r\n                  placeholder=\"Select Test Type\"\r\n                  isMulti\r\n                  name=\"testType\"\r\n                  value={graphInfo['testType'].map((el)=>({value:el,label:el}))}\r\n                  options={pg['databaseTestType'].map((el)=>({value:el['test_type'],label:el['test_type']}))}\r\n                  onChange={(el)=>(el? handleChange({value:el.map(el=>el.value),name:'testType'}): handleChange({value:[],name:'testType'}))}\r\n                  required\r\n                  />\r\n                  <FormInput\r\n                    type='text'\r\n                    name='lowerSN'\r\n                    value={graphInfo.lowerSN}\r\n                    onChange={handleChange}\r\n                    label='Lower Serial Number'\r\n                  />\r\n\r\n                  <FormInput\r\n                  type='text'\r\n                  name='upperSN'\r\n                  value={graphInfo.upperSN}\r\n                  onChange={handleChange}\r\n                  label='Upper Serial Number'\r\n                  />\r\n                  <DateRangePicker\r\n                  onChange={item => setgraphInfo({ ...graphInfo, range: [item.selection] })}\r\n                  showSelectionPreview={true}\r\n                  moveRangeOnFirstSelection={false}\r\n                  months={2}\r\n                  ranges={graphInfo['range']}\r\n                  direction=\"horizontal\"\r\n                  />\r\n              \r\n                </div>\r\n              :\r\n              graphInfo['xTable']|| graphInfo['yTable']?\r\n              <Spinner/>\r\n              :\r\n              <React.Fragment/>\r\n            }\r\n            \r\n          </div>\r\n          :\r\n          <div/>    \r\n          }\r\n      \r\n      {\r\n        graphInfo['xTable'] || graphInfo['yTable']?\r\n          !isFetching?\r\n            graphInfo['xTable'] === graphInfo['yTable']?\r\n            <Warning>X sensor cannot be the same as Y sensor</Warning>\r\n            :\r\n            <CustomButton type='submit'>Add to Graph</CustomButton>\r\n          :\r\n            <Spinner/>\r\n        :\r\n        <div/>\r\n      }\r\n      </FormContainer>\r\n\r\n      {\r\n        userGraph.versus['all'].length?\r\n        <FormContainer onSubmit={handleGraph}>\r\n          <FormSelect\r\n                  label='User Tables'\r\n                  placeholder=\"Select Tables\"\r\n                  isMulti\r\n                  name=\"userTable\"\r\n                  value={userGraph.versus.selected.map((el)=>({value:el,label:el}))}\r\n                  options={userGraph.versus.all.map((el)=>({value:el,label:el}))}\r\n                  onChange={(el)=>(el?\r\n                    setUserGraph({\r\n                      composed: userGraph.composed,\r\n                      pie: userGraph.pie,\r\n                      versus: {...userGraph.versus,selected:el.map(el=>el.value)}\r\n                    })\r\n                    :\r\n                    setUserGraph({\r\n                      composed: userGraph.composed,\r\n                      pie: userGraph.pie,\r\n                      versus: {...userGraph.versus,selected:[]}\r\n                    })\r\n                    \r\n                    )\r\n                  }\r\n\r\n                  required\r\n                  />\r\n          <FormSelect\r\n                  label='Percision'\r\n                  placeholder=\"\"\r\n                  value={{value:userGraph.versus['percision'],label:userGraph.versus['percision']}}\r\n                  options={[...new Array(10).keys()].map(el=>({value:el+1,label:el+1}))}\r\n                  onChange={(el)=>\r\n                    setUserGraph({\r\n                      composed: userGraph.composed,\r\n                      pie: userGraph.pie,\r\n                      versus: {...userGraph.versus,percision:el.value}\r\n                    })\r\n                  }\r\n                  required\r\n                  />\r\n          {\r\n            userGraph.versus.selected.length && ! isFetching?\r\n            <CustomButton>Graph Selected</CustomButton>\r\n            :\r\n            <div/>\r\n          }\r\n        </FormContainer>\r\n        \r\n        :\r\n        <div/>\r\n      }\r\n      {\r\n        Object.keys(userGraph.versus['graphData']).length?\r\n        <VersusChartComponent data={userGraph.versus['graphData']}/>\r\n        :\r\n        <div/>\r\n      }\r\n      \r\n    </VersusChartPageContainer>\r\n    \r\n  );\r\n}\r\n\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  pg: selectPg,\r\n  isFetching: selectIsPgFetching,\r\n  userGraph: selectUserGraph,\r\n  sql: selectPgSql\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchPgStart: (info) => dispatch(fetchPgStart(info)),\r\n  setUserGraph: (userGraph) => dispatch(setUserGraph(userGraph))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(VersusChartPage);\r\n"],"sourceRoot":""}